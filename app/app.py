import sys
import os

import requests
from PIL import Image
from PIL.ImageQt import ImageQt
from PyQt5.QtGui import QPixmap
import time
from PyQt5 import uic
from PyQt5 import QtCore
from PyQt5.QtCore import Qt, QThread
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QStackedWidget, QFileDialog

SERVER_ADDRESS = "127.0.0.1:9999"  # –ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞, –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –ª–æ–∫–∞–ª—å–Ω—ã–π
SEND_GET_REQUESTS = False  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ get –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤


class Login(QMainWindow):  # –û–∫–Ω–æ –ª–æ–≥–∏–Ω–∞. –ï—Å–ª–∏ –≤—Ö–æ–¥ —Å —ç—Ç–æ–≥–æ ip —É–∂–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω, —Ç–æ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ª—é–±—ã–µ
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        uic.loadUi('ui/login.ui', self)
        self.stack = QStackedWidget()  # –í–∏–¥–∂–µ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏
        self.stack.addWidget(self)
        self.stack.setWindowTitle("Barrelgram")
        self.stack.setCurrentWidget(self)
        self.requestThread = RequestThread()  # –ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.main = Main(self.requestThread)
        self.stack.addWidget(self.main)
        self.stack.setGeometry(self.geometry())
        self.stack.show()
        self.requestThread.start()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        self.button_login.clicked.connect(self.login)

    #        self.login(raw=True) –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥, –Ω–æ PyQt –Ω–µ —Ö–æ—á–µ—Ç

    def login(self, raw=False):  # –ü–∞—Ä–∞–º–µ—Ç—Ä row –Ω—É–∂–µ–Ω –±—ã–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ —Å —ç—Ç–æ–≥–æ ip —É–∂–µ –≤–æ—à–ª–∏
        # –ù–æ PyQt –Ω–µ —É—Å–ø–µ–≤–∞–ª —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã
        if (self.login_input.text() == "" or self.password_input.text() == "") and not raw:
            return

        data = {
            "login": self.login_input.text(),
            "password": self.password_input.text()
        }

        response = requests.post("http://" + SERVER_ADDRESS, data=data, params={"app_client": True}).json()
        if response["verdict"] == "denied":
            if not raw:
                self.button_login.setText("Invalid data!")
            return
        else:
            if not raw:
                global SEND_GET_REQUESTS
                self.button_login.setText("Login")
                self.main.updateData(response, load_photo=True)
                self.stack.setCurrentWidget(self.main)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
                SEND_GET_REQUESTS = True  # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤


class Main(QWidget):  # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    def __init__(self, requestThread):
        super().__init__()
        self.dialogues = {}  # –¢–µ–∫—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ (—Ñ–æ—Ä–º–∞—Ç json)
        self.active_dialogue = None  # –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–æ—Ç 1 –¥–æ 10)
        self.delta_down = 0  # –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤–Ω–∏–∑ –ø—Ä–æ–ª–∏—Å—Ç–∞–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        self.searching = False  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –ø–æ–∏—Å–∫
        self.requestThread = requestThread
        self.buttonThread = ButtonThread()  # –≠—Ç–æ—Ç –ø–æ—Ç–æ–∫ –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        self.buttonThread.start()
        self.buttonThread.triggered.connect(self.light_active_dialogue)
        self.initUI()
        self.dial_text = ""  # –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞

    def initUI(self):  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∏
        uic.loadUi('ui/main.ui', self)
        self.setAttribute(QtCore.Qt.WA_StyledBackground, True)
        self.uiMessages = [self.line_1, self.line_2, self.line_3, self.line_4, self.line_5,
                           self.line_6, self.line_7, self.line_8, self.line_9, self.line_10,
                           self.line_11, self.line_12, self.line_13, self.line_14, self.line_15, self.line_16]
        # –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ ui –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏, —á—Ç–æ–±—ã –∏—Ö –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –ø–æ—Ç–æ–º
        self.uiDialogues = (
            (self.dial_1, self.name_1, self.last_message_1, self.photo_1, self.new_messages_1, self.time_1),
            (self.dial_2, self.name_2, self.last_message_2, self.photo_2, self.new_messages_2, self.time_2),
            (self.dial_3, self.name_3, self.last_message_3, self.photo_3, self.new_messages_3, self.time_3),
            (self.dial_4, self.name_4, self.last_message_4, self.photo_4, self.new_messages_4, self.time_4),
            (self.dial_5, self.name_5, self.last_message_5, self.photo_5, self.new_messages_5, self.time_5),
            (self.dial_6, self.name_6, self.last_message_6, self.photo_6, self.new_messages_6, self.time_6),
            (self.dial_7, self.name_7, self.last_message_7, self.photo_7, self.new_messages_7, self.time_7),
            (self.dial_8, self.name_8, self.last_message_8, self.photo_8, self.new_messages_8, self.time_8),
            (self.dial_9, self.name_9, self.last_message_9, self.photo_9, self.new_messages_9, self.time_9),
            (self.dial_10, self.name_10, self.last_message_10, self.photo_10, self.new_messages_10, self.time_10))
        self.my_i = None  # –í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã ImageQt –∏ QPixmap –¥–æ–ª–∂–Ω—ã, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É, —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏
        self.my_pixmap = None  # –ò–Ω–∞—á–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Ç–≤–æ—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞—à–Ω–æ–µ
        # –ü–æ—ç—Ç–æ–º—É –≤ —ç—Ç–∏ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ ImageQt –∏ QPixmap
        self.pixmaps = [['' for i in range(10)], ['' for i in range(10)]]
        self.message_input.hide()
        self.button_file.hide()
        self.button_log_out.clicked.connect(self.logOut)
        self.button_support.clicked.connect(self.support)
        self.search.editingFinished.connect(self.search_fun)
        self.button_file.clicked.connect(self.send_file)
        self.requestThread.response_got.connect(self.handleResponse)

        for b in self.dialogue_buttons.buttons():
            b.clicked.connect(self.openDialogue)

    def handleResponse(self, jsonfile):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        self.updateData(jsonfile, load_photo=False)
        self.updateActiveDialogue()

    def light_active_dialogue(self):  # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if self.active_dialogue is None:
            for el in self.uiDialogues:
                el[0].setStyleSheet("border-top: 2px solid #DCDCDC;background-color: rgba(255, 147, 85, 0);")
        else:
            for i in range(len(self.uiDialogues)):
                if i == self.active_dialogue - 1:
                    self.uiDialogues[i][0] \
                        .setStyleSheet("border-top: 2px solid #DCDCDC;background-color: rgba(255, 147, 85, 120);")
                else:
                    self.uiDialogues[i][0] \
                        .setStyleSheet("border-top: 2px solid #DCDCDC;background-color: rgba(255, 147, 85, 0);")

    def support(self):  # –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é id –∞–¥–º–∏–Ω–∞ 1.
        self.search.setText("1")
        self.search_fun()

    def updateData(self, jsonfile, load_photo=False):  # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. load_photo –∑–Ω–∞—á–∏—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –Ω–µ—Ç
        my_id = jsonfile["id"]
        my_name = jsonfile["name"]
        if load_photo:
            self.my_i = self.load_photo(my_id, self.current_user_photo)
            self.my_pixmap = QPixmap.fromImage(self.my_i)
            self.current_user_photo.setPixmap(self.my_pixmap)
        self.dialogues = jsonfile["dialogues"]
        if self.dialogues["amount"] < 10:  # –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è–π—á–µ–π–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            for i in range(1, 11):
                if i > self.dialogues["amount"]:
                    for el in self.uiDialogues[i - 1]:
                        el.hide()
                else:
                    for el in self.uiDialogues[i - 1]:
                        el.show()
        for i in range(10):  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —è—á–µ–π–∫–∞—Ö —Å –¥–∏–∞–ª–æ–≥–æ–º
            name = self.dialogues[str(i + 1)]["name"]
            last_message = self.dialogues[str(i + 1)]["last_message"]
            new_messages = self.dialogues[str(i + 1)]["new_messages"]
            new = self.dialogues[str(i + 1)]["new"]
            if name != "":
                last_message_time = self.dialogues[str(i + 1)]["last_message_time"]
            else:
                last_message_time = ""

            self.uiDialogues[i][1].setText(name)
            self.uiDialogues[i][2].setText(last_message)
            if new or load_photo:
                self.pixmaps[0][i] = self.load_photo(jsonfile["dialogues"][str(i + 1)]["photo"], self.uiDialogues[i][3])
                self.pixmaps[1][i] = QPixmap.fromImage(self.pixmaps[0][i])
                if name != "":
                    self.uiDialogues[i][3].setPixmap(self.pixmaps[1][i])
            if name == "":
                self.uiDialogues[i][3].clear()
            self.uiDialogues[i][4].setText(str(new_messages))
            if new_messages == 0:
                self.uiDialogues[i][4].hide()
            self.uiDialogues[i][5].setText(last_message_time)

        self.your_id.setText("Your id: " + str(my_id))
        self.current_user.setText(my_name)

    def search_fun(self):  # –ü–æ–∏—Å–∫
        if "üîé" in self.search.text() or self.search.text() == "":
            self.search.setText("üîé Enter name or id")
        else:
            global SEND_GET_REQUESTS
            SEND_GET_REQUESTS = False  # –ù–∞ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
            self.searching = True
            self.active_dialogue = None
            for el in self.uiMessages:
                el.clear()
            params = {
                "txt": self.search.text()
            }
            users = requests.get("http://" + SERVER_ADDRESS + "/main/search", params=params).json()
            self.updateData(users, load_photo=True)

    def send_file(self):  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 200 –ú–ë
        if self.active_dialogue is None:
            return
        fname = QFileDialog.getOpenFileName(self, 'Choose a file', '',
                                            'Image (*.jpg);;Image (*.png);;'
                                            ' Image (*.bmp);;Audio (*.mp3);;Video (*.mp4)')[0]
        if os.path.exists(fname):
            size = os.stat(fname).st_size / (1024 * 1024)
            if size > 200:
                return False
            type = fname.split(".")[-1]
            action = None
            if type in ["jpg", "png", "bmp"]:
                action = "photo"
            elif type == "mp3":
                action = "audio"
            elif type == "mp4":
                action = "video"
            if action is None:
                return False

            file = open(fname, "rb")
            data = {
                "action": action,
                "receiver": self.dialogues[str(self.delta_down + self.active_dialogue)]["photo"]
            }
            files = {
                "file": file
            }

            requests.post(
                "http://" + SERVER_ADDRESS + f"/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}",
                data=data, files=files, stream=True)

    def keyPressEvent(self, event):  # –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if int(event.modifiers()) == Qt.CTRL:
            if event.key() == Qt.Key_Return and self.message_input.toPlainText().replace(" ", "").replace("\t",
                                                                                                          "") != "":
                self.send_message(self.message_input.toPlainText())

    def wheelEvent(self, event):  # –õ–∏—Å—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        if self.active_dialogue is None:
            return

        if event.angleDelta().y() > 0:
            if self.delta_down < len(self.dial_text) - 16:
                self.delta_down += 1
        elif event.angleDelta().y() < 0:
            if self.delta_down > 0:
                self.delta_down -= 1

    def send_message(self, message):  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.active_dialogue is None:
            return
        id_1 = self.active_dialogue
        data = {
            "action": "text",
            "message": message,
            "receiver": self.dialogues[str(self.delta_down + self.active_dialogue)]["photo"]
        }

        requests.post("http://" + SERVER_ADDRESS +
                      f"/main/dialogue/{self.dialogues[str(self.delta_down + id_1)]['id']}", data=data)
        self.message_input.setPlainText("")
        self.active_dialogue = 1
        self.updateAvatars()

    def updateActiveDialogue(self):  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if self.active_dialogue is None:
            return
        msgs = requests.get("http://" + SERVER_ADDRESS +
                            f"/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}").json()
        my_id = int(self.your_id.text().split(" ")[2])
        text = ""
        for key in msgs.keys():
            msg = msgs[key]
            show = ""
            if msg["user"] == my_id:
                show += "You: "
            else:
                show += f"{self.uiDialogues[self.active_dialogue - 1][1].text().split(' ')[0]}: "
            if msg['type'] == "text":
                show += msg["text"]
            elif msg['type'] == "video":  # –¢–∞–∫ –¥–µ–ª–∞—é—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
                show += f"<a href=\"http://{SERVER_ADDRESS}/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}/video/{msg['text']}\">Video</a>"
            elif msg['type'] == "photo":
                show += f"<a href=\"http://{SERVER_ADDRESS}/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}/photo/{msg['text']}\">Photo</a>"
            elif msg['type'] == "audio":
                show += f"<a href=\"http://{SERVER_ADDRESS}/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}/audio/{msg['text']}\">Audio</a>"
            text = text + "\n" + show
        self.setMessages(text)

    def openDialogue(self):  # –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
        global SEND_GET_REQUESTS
        id = int(self.sender().objectName().split("_")[1])  # id –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        if id == self.active_dialogue or self.uiDialogues[self.delta_down + id - 1][1].text() == "":
            return
        for el in self.uiMessages:
            el.clear()
        self.search.setText("üîé Enter name or id")
        self.message_input.show()
        self.button_file.show()

        self.active_dialogue = id
        params = {
            "receiver": int(self.dialogues[str(id)]["photo"])
        }
        msgs = requests.get("http://" + SERVER_ADDRESS +
                            f"/main/dialogue/{self.dialogues[str(self.active_dialogue)]['id']}", params=params).json()
        if self.searching:
            self.searching = False
            self.active_dialogue = None
            SEND_GET_REQUESTS = True
        my_id = int(self.your_id.text().split(" ")[2])
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        text = ""
        for key in msgs.keys():
            msg = msgs[key]
            show = ""
            if msg["user"] == my_id:
                show += "You: "
            else:
                show += f"{self.uiDialogues[id - 1][1].text().split(' ')[0]}: "
            show += msg["text"]
            text = text + "\n" + show
        self.setMessages(text, scroll_to_end=True)
        self.updateAvatars()

    def setMessages(self, text, scroll_to_end=False):  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        # Scroll to end - —Ç–æ –µ—Å—Ç—å –ø—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏
        text = text.strip("\n")
        text = text.split("\n")

        def string_split(x):
            if "<a href" not in x:  # –ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏
                parts = []
                while len(x) > 60:
                    parts.append(x[:61])
                    x = x[61:]
                if x != "":
                    parts.append(x)
                return parts
            else:
                return x

        text = list(map(lambda x: string_split(x), text))
        text = list(map(lambda x: "".join(x), text))
        true_text = []
        for el in text:
            if "\n" not in el:
                true_text.append(el)
            else:
                for e in el.split("\n"):
                    true_text.append(e)

        if scroll_to_end:
            self.delta_down = len(true_text) - 16
            if self.delta_down < 0:
                self.delta_down = 0
        for i in range(16):
            try:
                self.uiMessages[i].setText(true_text[self.delta_down + i])
            except IndexError:
                break
        self.dial_text = true_text

    def updateAvatars(self):  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏. –ò–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –ø–æ–¥–≤–∏—Å–∞—Ç—å, –Ω–æ —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        for i in range(10):
            name = self.dialogues[str(i + 1)]["name"]
            self.pixmaps[0][i] = self.load_photo(self.dialogues[str(i + 1)]["photo"], self.uiDialogues[i][3])
            self.pixmaps[1][i] = QPixmap.fromImage(self.pixmaps[0][i])
            if name != "":
                self.uiDialogues[i][3].setPixmap(self.pixmaps[1][i])
            else:
                self.uiDialogues[i][3].clear()

    def logOut(self):  # –í—ã–π—Ç–∏
        global SEND_GET_REQUESTS
        requests.get("http://" + SERVER_ADDRESS + "/go_out")
        SEND_GET_REQUESTS = False
        main.stack.setCurrentWidget(main)

    def load_photo(self, id, label):  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Å–∞–π—Ç–∞
        if id == "":
            id = "icon"
        im = Image.open(requests.get("http://" + SERVER_ADDRESS + f"/all_avatars/{id}", stream=True).raw)
        x, y = label.geometry().width(), label.geometry().height()
        im = im.resize((x, y))
        return ImageQt(im.copy())


class RequestThread(QThread):  # –ü–æ—Ç–æ–∫, –¥–µ–ª–∞—é—â–∏–π get –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –∫–∞–∂–¥—ã–µ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    response_got = QtCore.pyqtSignal(dict)

    def __init__(self):
        QtCore.QThread.__init__(self)

    def run(self):
        while True:
            if SEND_GET_REQUESTS:
                response = requests.get("http://" + SERVER_ADDRESS + "/main/dialogues").json()
                self.response_got.emit(response)
            time.sleep(0.5)


class ButtonThread(QThread):  # –ü–æ—Ç–æ–∫, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ë—ã–ª–æ –ª–µ–Ω—å –¥–µ–ª–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É

    triggered = QtCore.pyqtSignal()

    def __init__(self):
        QtCore.QThread.__init__(self)

    def run(self):
        while True:
            self.triggered.emit()
            time.sleep(0.01)


def except_hook(cls, exception, traceback):  # –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≥–¥–µ –∫–æ—Å—è–∫
    sys.__excepthook__(cls, exception, traceback)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    main = Login()  # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    main.show()
    sys.excepthook = except_hook
    sys.exit(app.exec())
